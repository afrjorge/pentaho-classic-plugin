#################################################################################################
# Translatable strings can be substituted on either the server side (Java)
# or client side (Javascript).  Server side strings are substituted
# using a regular expression that searches for @{KEY}
# Client side strings are substituted using dojo.string.substituteParams
# which uses a regex that matches %{KEY}
#
# To create a new resource file, just copy this file and rename it
# to message_<language>.properties where language is the two letter lower case
# language ISO code:  http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
# Based on the language code of the platform, Analyzer will first try to find
# the message from the message_<language>.properties file.  If not found,
# then Analyzer will look into the default message.properties.
# Do not change message.properties directly!
#
# In order to translate Mondrian schema elements like cubes, dimensions,
# measures, etc, you need to set the property
# mondrian.rolap.localePropFile=<Resource Name>
# If you set Resource Name, to say: com.pentaho.messages.MondrianMessages
# then you would place a MondrianMessages.properties or MondrianMessages_ja.properties
# file under tomcat/webapps/pentaho/WEB-INF/classes/com/pentaho/messages/MondrianMessages.properties
# or tomcat/webapps/pentaho/WEB-INF/classes/com/pentaho/messages/MondrianMessages_ja.properties

########################################################
# Required strings that must be translated
########################################################

titleClassicPlugin=Classic Plugin
openClassicPlugin=Classic Plugin
tabName=Classic Plugin
